{
  "title": "blurHY",
  "description": "我，初中生。\n**I** , The Junior School Student ",
  "links": "## Categories\n\n*   [零网相关](./?Post:22:%E9%9B%B6%E7%BD%91%E7%9B%B8%E5%85%B3)\n*   [前端开发](./?Post:3:%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80)\n*   [后端开发](./?Post:19:%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80)\n*   [桌面开发](http://127.0.0.1:43110/12q9YNb5oJ331nTjUxWefV9W2EXpMu8RWi/?Post:51:%E6%A1%8C%E9%9D%A2%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80)\n*   [数据库](./?Post:13:DB)​​​​​​\n*   [爬虫](./?Post:53:%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0)\n*   [Markdown](./?Post:12:Markdown%E7%B3%BB%E5%88%97)\n*   [杂项](./?Post:15:New+blog+post)\n*   [About](about.html)\n\n## MySites\n\n*   聊天室：[DemoOne](http://127.0.0.1:43110/1BpjbPLPb2Vyipqu2Y8Dk54ngbesNrt7iG/)",
  "next_post_id": 59,
  "modified": 1533904097,
  "post": [
    {
      "post_id": 58,
      "title": "Plan to make a Enhanced Blog Plus ",
      "date_published": 1533902419.924,
      "body": "*   Next/Prev Post `Done`\n*   Tag , toc by tag\n*   Search eveything\n*   User able to upload files\n*   ~~Dynamic Multi-Language(not useful)~~\n\nWhat's your idea? Please comment below."
    },
    {
      "post_id": 57,
      "title": "The principle of ZeroBoard 原理",
      "date_published": 1533898070.37,
      "body": "![](./note/zeronet/zeroboard.svg)"
    },
    {
      "post_id": 56,
      "title": "爬虫的一碗BeautifulSoup",
      "date_published": 1533881890,
      "body": "### 安装BeautifulSoup\n\n`pip install beautifulsoup4`\n\n### 初次使用\n\n```py\nfrom urllib.request import urlopen\nfrom bs4 import BeautifulSoup\n\nhtml = urlopen(\"http://example.com/\")\nbsObj = BeautifulSoup(html.read())\nprint(bsObj.h1)\n```\n\n输出\n\n```html\n<h1>Example Domain</h1>\n```\n\n### find和findAll()\n\n```py\nfrom urllib.request import urlopen\nfrom bs4 import BeautifulSoup\n\nhtml = urlopen(\"https://www.zhihu.com/\")\nbsObj = BeautifulSoup(html.read())\nlist = bsObj.findAll(\"button\", {\"class\": \"Button\"})\nfor item in list:\n    print(item.get_text())\n```\n\n输出\n\n```\n登录\n加入知乎\n获取短信验证码\n注册\n下载知乎 App\n```\n\n更多例子\n\n```py\n.findAll({\"h1\",\"h2\",\"h3\",\"h4\",\"h5\",\"h6\"},{\"class\":{\"green\", \"red\"}})\n```\n\n语法\n\n```py\n​​​​​​​findAll(tag, attributes, recursive, text, limit, keywords)\nfind(tag, attributes, recursive, text, keywords)\n```\n\n*   `recursive`，默认为true，表示允许递归查找\n    *   如果设为false，则只会查找一级标签\n\n### 简化的写法\n\n```py\nbsObj.findAll(id=\"text\") #keywords参数\nbsObj.findAll(\"\", {\"id\":\"text\"})\n```\n\n这两句等效。\n\n### 子标签\n\n遍历出所有子标签（仅一层）。\n\n```py\nfor child in bsObj.find(\"table\",{\"id\":\"giftList\"}).children:\n\tprint(child)\n```\n\n- 用`descendants`函数提取后代标签\n- 用`parent`和`parents`提取父、祖先标签\n\n### 正则表达式\n\n```py\nbsObj.findAll(\"img\",{\"src\":re.compile(\"\\.\\.\\/img\\/gifts/img.*\\.jpg\")})\n```\n\n任意参数都可以时正则表达式\n\n### 获取元素属性\n\n```py\nmyImgTag.attrs[\"src\"]\n```\n\n### 函数作为参数\n\n```py\ndef test(tag):\n    if len(tag.attrs) > 10:\n        return True\n    else:\n        return False\n\nprint(bsObj.findAll(test))\n```\n\n\n输出\n\n```py\n[<input aria-activedescendant=\"null--1\" aria-autocomplete=\"list\" aria-expanded=\"false\" aria-haspopup=\"true\" aria-owns=\"null-content\" autocomplete=\"off\" class=\"Input\" id=\"null-toggle\" maxlength=\"100\" placeholder=\"\" role=\"combobox\" type=\"text\" value=\"\"/>]\n```\n\nlambda也是可以的。\n\n### 还有一些库类似BeautifulSoup\n\n- lxml，用C语言写的，够高效\n- HTML parser，py自带"
    },
    {
      "post_id": 55,
      "title": "目标",
      "date_published": 1533740011.578,
      "body": "全栈：\n\n前端、后端、桌面、嵌入式\n\n初中毕业之前应该能学完的 （手动滑稽）"
    },
    {
      "post_id": 54,
      "title": "刷zeroboard-2",
      "date_published": 1533623747.122,
      "body": "```py\nimport urllib.request\nimport urllib.parse\nimport urllib.error\nimport random\nimport string\nimport requests\nimport time\nfrom watchdog.observers import Observer\nfrom fake_useragent import UserAgent\nfrom watchdog.events import FileSystemEventHandler\nimport logging\n\nmessage = \"\"\ntimes = 0\nfilecount = 10\n\nua = UserAgent()\n\nurl = \"https://zeroid.qc.to/ZeroBoard/add.php\"\ndata = []\n\nfor x in range(1, filecount + 1):\n    fh = open(\"F:\\\\Test\\\\\" + str(x) + \".txt\", \"rb\") # in folder f:\\test, you should put 1.txt,2.txt,3.txt ..... 10.txt\n    data.append(fh.read())\n\ni = 0\n\ndef get_proxy():\n    return requests.get(\"http://127.0.0.1:5010/get/\").content\n\ndef post_message(body=None):\n    if not body:\n        body = data[random.randint(0, filecount - 1)]\n    else:\n        body = body.encode(\"utf-8\")\n\n    postdata = urllib.parse.urlencode({\n        \"body\": body,\n        \"auth_key\": ''.join(random.sample(string.ascii_letters + string.digits, 30)),\n        \"hash\": \"sha512\"\n    }).encode(\"utf-8\")\n\n    req = urllib.request.Request(url, postdata)\n    req.set_proxy(get_proxy().decode(), \"http\")\n    req.add_header(\"User-Agent\", ua.random)\n    urllib.request.urlopen(req, timeout=15)\n\nlimit = 5\n\ndef post_msg_anti_lunzi():\n    global limit\n    limit -= 1\n    if limit == 0:\n        print(\"limited\")\n        return\n    try:\n        print(\"send\" + \"  \" + str(limit) + \"/3\")\n        post_message()\n    except urllib.error.URLError as e:\n        print(e.reason)\n        post_msg_anti_lunzi()\n    except BaseException as be:\n        print(\"BaseException \" + str(be.args))\n        post_msg_anti_lunzi()\n    else:\n        limit = 0  # 成功\n\nclass MyEventHandler(FileSystemEventHandler):\n    def on_modified(self, event):\n        super(MyEventHandler, self).on_modified(event)\n        path = \"F:\\\\ZeroNet\\\\data\\\\1Gfey7wVXXg1rxk751TBTxLJwhddDNfcdp\\\\messages.json\"\n        if event.src_path == path:\n            print(\"file modified\")\n            global limit\n            limit = 5\n            post_msg_anti_lunzi()\n\nif message:\n    try:\n        post_message(message)\n    except urllib.error.URLError as e:\n        print(e.reason)\n    except BaseException as be:\n        print(\"BaseException \" + str(be.args))\nelif times:\n    i = 0\n    print(\"times \" + str(times))\n    while i < times:\n        try:\n            print(\"send\")\n            post_message()\n        except BaseException as be:\n            print(\"BaseException \" + str(be.args))\n        finally:\n            time.sleep(10)\n        i += 1\nelse:\n    logging.basicConfig(level=logging.INFO,\n                        format='%(asctime)s - %(message)s',\n                        datefmt='%Y-%m-%d %H:%M:%S')\n    path = \"F:\\\\ZeroNet\\\\data\\\\1Gfey7wVXXg1rxk751TBTxLJwhddDNfcdp\\\\\"\n    event_handler = MyEventHandler()\n    observer = Observer()\n    observer.schedule(event_handler, path, recursive=True)\n    observer.start()\n    try:\n        while True:\n            time.sleep(1)\n    except KeyboardInterrupt:\n        observer.stop()\n    observer.join()\n```\n\n文件修改就发送消息，发送尝试全部成功，文件就会被修改，然后再尝试发送消息。\n如果全部发送失败，文件没有被修改，那么不会继续发消息。\nzeroboard是中心化的，站点的消息更新即时服务器发布的。\n\n所以说这个bot是贪婪的，能发一条成功的，就再发几条，直到服务器ban你。\n\nDon't forget to launch the [proxy pool](https://github.com/jhao104/proxy_pool)\n\nAnd the proxy pool requires SSDB"
    },
    {
      "post_id": 53,
      "title": "爬虫开发笔记",
      "date_published": 1533621986.192,
      "body": "[笔记1](./note/spider-py/spider-py.md.html)\n未完待续"
    },
    {
      "post_id": 52,
      "title": "刷zeroboard（1）",
      "date_published": 1533519918.721,
      "body": "```py\nimport urllib.request\nimport urllib.parse\nimport time\nimport urllib.error\nimport random\nimport string\nfrom fake_useragent import UserAgent\n\nua = UserAgent()\n\nurl = \"https://zeroid.qc.to/ZeroBoard/add.php\"\nfh = open(\"F:\\\\Test\\\\anti-flg.txt\", \"rb\")\ndata = fh.read()\n\ni = 0\n\nwhile i < 15:\n    try:\n        postdata = urllib.parse.urlencode({\n            \"body\": data,\n            \"auth_key\": ''.join(random.sample(string.ascii_letters + string.digits, 30)),\n            \"hash\": \"sha512\"\n        }).encode(\"utf-8\")\n\n        req = urllib.request.Request(url, postdata)\n        req.add_header(\"User-Agent\", ua.random)\n        urllib.request.urlopen(req, timeout=8)\n    except urllib.error.URLError as e:\n        print(e.reason)\n    except BaseException:\n        pass\n    finally:\n        i += 1\n        time.sleep(900)\n```"
    },
    {
      "post_id": 51,
      "title": "桌面开发",
      "date_published": 1533438062.219,
      "body": "[Python笔记1](./note/py/py1.md.html)\n[Python笔记2](./note/py2/py2.md.html)"
    },
    {
      "post_id": 50,
      "title": "站长是可以更改用户数据的，细思极恐",
      "date_published": 1533351576.934,
      "body": "刚刚试了一下，改完`users/.../data.json`后签名json、重载重建数据库，即可生效。\n\n增删改，都可以。"
    },
    {
      "post_id": 47,
      "title": "删除可选文件，下载可选文件的两种方式：fileNeed和直接设置src",
      "date_published": 1533105673.551,
      "body": "摘自ZeroUp源码\n\n```js\nFile.prototype.deleteFile = function(cb) {\n      return Page.cmd(\"optionalFileDelete\", this.row.inner_path, (function(_this) {\n        return function() {\n          return Page.cmd(\"optionalFileDelete\", _this.row.inner_path + \".piecemap.msgpack\", function() {\n            return typeof cb === \"function\" ? cb(true) : void 0;\n          });\n        };\n      })(this));\n };\n```\n\n用fileNeed下载\n\n```js\n      this.status = \"downloading\";\n      Page.cmd(\"fileNeed\", this.row.inner_path + \"|all\", (function(_this) {\n        return function(res) {\n          return console.log(res);\n        };\n      })(this));\n      return false;\n```\n\n或者直接设置src属性（对于图片元素），浏览器会自动请求。\n尚不知道两者区别，大概fileNeed可以设置超时时间吧。"
    },
    {
      "post_id": 46,
      "title": "可选文件、大文件上传",
      "date_published": 1532766116.608,
      "body": "还是看我的[DemoOne](/1BpjbPLPb2Vyipqu2Y8Dk54ngbesNrt7iG/)\n\n这次源码是从ZeroUp抄过来的，稍加整理，把结构简化了。\n欢迎查看DemoOne网站源码，未压缩。\n\n重点代码\n\n```json\n  \"maps\": {\n    \"users/.+/data.json\": {\n      \"to_table\": [\n      {\"node\": \"message\",\"table\":\"message\"},\n      {\"node\": \"file\", \"table\": \"file\", \"key_col\": \"file_name\"}\n      ]\n    },\n```\n\n```\nthis.cmd(\"dbQuery\", [\"SELECT * FROM file LEFT JOIN json USING (json_id) ORDER BY date_added DESC\"], function (res) {\npage.cmd(\"optionalFileList\", {\nlimit: 1000,\n}, function (r) { //...\n```"
    },
    {
      "post_id": 45,
      "title": "实现Follow功能：插件：Newsfeed",
      "date_published": 1532747961.662,
      "body": "先发句牢骚，我花了两天时间研究这个插件，坑太多了，都是零网的bug。\n\n零网的follow功能其实很简单，只要把网站的sql查询语句提交给零网客户端就行。\n\n### API : feedFollow\n\n用这个api设置sql查询语句，不是网站查询，而是零网自动帮你查询。\n\n```\nquery = \"\n    SELECT\n     post_id AS event_uri,\n     'post' AS type,\n     date_published AS date_added,\n     title AS title,\n     body AS body,\n     '?Post:' || post_id AS url\n    FROM post\n\"\nparams = []\npage.cmd(\"feedFollow\",[{\"Posts\": [query, params]}]);\n```\n\nsql查询语句中要指定参数type、date_added、title、body、url。\n\n*   `'post' AS type`：可以是post, article, comment, mention\n*   `\"Posts\"`：查询名称，这个随便设置。\n\n如果站点会推送很多消息，最好在sql查询语句中写 `'' as url`，即url为空。零网会将url相同的推送消息合并在一块。\n\n### API : feedListFollow\n\n用于查询现在用户已经订阅了哪些sql查询语句，返回值就是回调函数的参数值。\n\n就这两个API，其他的用不着。\n\n可以参考我的网站[DemoOne](/1BpjbPLPb2Vyipqu2Y8Dk54ngbesNrt7iG/)的源码。\n我在Debug页面给出了FollowList的结构。\n\n顺便给出我的查询语句\n\n```\nlet queryUM = `SELECT 'mention' AS type,date_added,cert_user_id AS title,'@' || cert_user_id || ':' || body as body,'?user=' || cert_user_id || '&date=' || date_added  as url FROM message LEFT JOIN json USING (json_id) WHERE message.body LIKE('%@${this.site_info.cert_user_id.substr(0, this.site_info.cert_user_id.lastIndexOf(\"@\"))}%') `;//\nlet queryAC = `SELECT \"post\" as type,date_added,\"DemoOne Comments\" as title, body ,\"\"  as url FROM message LEFT JOIN json USING (json_id)`;\n```\n\n前面一个是只订阅提及用户名的消息，\n后面一个是订阅所有消息。\n\n**注意：如果订阅不起作用，百分之九十九的可能都是SQL语句错误。**"
    },
    {
      "post_id": 44,
      "title": "图解零网系列-第一篇",
      "date_published": 1532744149,
      "body": "### 层层嵌套的content.josn\n\n![](./note/zeronet/content_json.svg)\n\n一般情况下，用户只能更改绿色区域的数据，用户自己签名自己的数据。\n\n### Json和数据库\n\n![](./note/zeronet/db_json.svg)"
    },
    {
      "post_id": 43,
      "title": "零网聊天室Chat建站指南",
      "date_published": 1532740180,
      "body": "### 创建完空站点之后\n\n将以下代码放入替换页面的body元素。\n\n```html\n<body>\n\n<a href=\"#Select+user\" id=\"select_user\" onclick='return page.selectUser()'>Select user</a>:\n<input type=\"text\" id=\"message\">\n<input type=\"button\" id=\"send\" value=\"Send!\" onclick=\"return page.sendMessage()\"/>\n<ul id=\"messages\">\n <li>Welcome to ZeroChat!</li>\n</ul>\n<script type=\"text/javascript\" src=\"js/ZeroFrame.js\"></script>\n\n</body>\n```\n\n*   ZeroFrame.js是零网自动在新站点文件夹中创建的，用这个文件中的类和websocket 通讯。\n\n### 调用API其实很简单\n\n把这段添进body元素\n\n```\n<script>\nclass ZeroChat extends ZeroFrame {\n    addMessage (username, message) {\n        var message_escaped = message.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\")  // Escape html tags in the message\n        this.messages.innerHTML += \"<li><b>\" + username + \"</b>: \" + message_escaped + \"</li>\"\n    }\n\n    onOpenWebsocket () {\n        this.messages = document.getElementById(\"messages\")\n        this.addMessage(\"System\", \"Ready to call ZeroFrame API!\")\n    }\n}\n\npage = new ZeroChat()\n</script>\n```\n\nZeroChat类继承了ZeroFrame （ZeroFrame在ZeroFrame.js中）。\n\n下面贴出了ZeroFrame.js的内容，你会发现，ZeroChat覆写了几个函数。\n\n```js\n\nconst CMD_INNER_READY = 'innerReady'\nconst CMD_RESPONSE = 'response'\nconst CMD_WRAPPER_READY = 'wrapperReady'\nconst CMD_PING = 'ping'\nconst CMD_PONG = 'pong'\nconst CMD_WRAPPER_OPENED_WEBSOCKET = 'wrapperOpenedWebsocket'\nconst CMD_WRAPPER_CLOSE_WEBSOCKET = 'wrapperClosedWebsocket'\n\nclass ZeroFrame {\n    constructor(url) {\n        this.url = url\n        this.waiting_cb = {}\n        this.wrapper_nonce = document.location.href.replace(/.*wrapper_nonce=([A-Za-z0-9]+).*/, \"$1\")\n        this.connect()\n        this.next_message_id = 1\n        this.init()\n    }\n\n    init() {\n        return this\n    }\n\n    connect() {\n        this.target = window.parent\n        window.addEventListener('message', e => this.onMessage(e), false)\n        this.cmd(CMD_INNER_READY)\n    }\n\n    onMessage(e) {\n        let message = e.data\n        let cmd = message.cmd\n        if (cmd === CMD_RESPONSE) {\n            if (this.waiting_cb[message.to] !== undefined) {\n                this.waiting_cb[message.to](message.result)\n            }\n            else {\n                this.log(\"Websocket callback not found:\", message)\n            }\n        } else if (cmd === CMD_WRAPPER_READY) {\n            this.cmd(CMD_INNER_READY)\n        } else if (cmd === CMD_PING) {\n            this.response(message.id, CMD_PONG)\n        } else if (cmd === CMD_WRAPPER_OPENED_WEBSOCKET) {\n            this.onOpenWebsocket()\n        } else if (cmd === CMD_WRAPPER_CLOSE_WEBSOCKET) {\n            this.onCloseWebsocket()\n        } else {\n            this.onRequest(cmd, message)\n        }\n    }\n\n    onRequest(cmd, message) {   //零网向网站发送通知\n        this.log(\"Unknown request\", message)\n    }\n\n    response(to, result) {   \n        this.send({\n            cmd: CMD_RESPONSE,\n            to: to,\n            result: result\n        })\n    }\n\n    cmd(cmd, params={}, cb=null) {    //这个函数用来调用API\n        this.send({\n            cmd: cmd,\n            params: params\n        }, cb)\n    }\n\n    cmdp(cmd, params={}) {\n        return new Promise((resolve, reject) => {\n            this.cmd(cmd, params, (res) => {\n                if (res && res.error) {\n                    reject(res.error)\n                } else {\n                    resolve(res)\n                }\n            })\n        })\n    }\n\n    send(message, cb=null) {\n        message.wrapper_nonce = this.wrapper_nonce\n        message.id = this.next_message_id\n        this.next_message_id++\n        this.target.postMessage(message, '*')\n        if (cb) {\n            this.waiting_cb[message.id] = cb\n        }\n    }\n\n    log(...args) {\n        console.log.apply(console, ['[ZeroFrame]'].concat(args))\n    }\n\n    onOpenWebsocket() {     //可以在这个函数中初始化页面\n        this.log('Websocket open')\n    }\n\n    onCloseWebsocket() {\n        this.log('Websocket close')\n    }\n\n    monkeyPatchAjax() {\n        var page = this\n        XMLHttpRequest.prototype.realOpen = XMLHttpRequest.prototype.open\n        this.cmd(\"wrapperGetAjaxKey\", [], (res) => { this.ajax_key = res })\n        var newOpen = function (method, url, async) {\n            url += \"?ajax_key=\" + page.ajax_key\n            return this.realOpen(method, url, async)\n        }\n        XMLHttpRequest.prototype.open = newOpen\n    }\n}\n```\n\n### 让用户选择证书\n\n这个我在前几篇博文里写过。\n\n```\n  selectUser () {\n        this.cmd(\"certSelect\", {accepted_domains: [\"zeroid.bit\"]})\n        return false\n    }\n```\n\n### 查询用户现在登陆的账户\n\n把这段添到ZeroChat类里。\n\n```js\n    onRequest (cmd, message) {\n        if (cmd == \"setSiteInfo\") {\n            if (message.params.cert_user_id)\n                document.getElementById(\"select_user\").innerHTML = message.params.cert_user_id\n            else\n                document.getElementById(\"select_user\").innerHTML = \"Select user\"\n            this.site_info = message.params  // Save site info data to allow access it later\n        }\n    }\n```\n\n一旦用户登陆的账户有改变（网站信息），零网就会通知网站。\n\n```js\n       this.cmd(\"siteInfo\", {}, (site_info) => {\n            if (site_info.cert_user_id)\n                document.getElementById(\"select_user\").innerText = site_info.cert_user_id\n            this.site_info = site_info\n        })\n```\n\n把这段代码添加到onOpenWebsocket函数中，就能在页面打开时显示用户当前账户。\n\n### 设置规定用户可以在自己的文件夹放什么\n\n创建`data/users/content.json`\n\n```\n{\n  \"files\": {},\n  \"ignore\": \".*\",\n  \"modified\": 0.0,\n  \"signs\": {},\n  \"user_contents\": {\n    \"cert_signers\": {\n      \"zeroid.bit\": [ \"1iD5ZQJMNXu43w1qLB8sfdHVKppVMduGz\" ]\n    },\n    \"permission_rules\": {\n      \".*\": {\n        \"files_allowed\": \"data.json\",\n        \"max_size\": 10000\n      },\n      \"bitmsg/.*@zeroid.bit\": { \"max_size\": 15000 }\n    },\n    \"permissions\": {\n      \"bad@zeroid.bit\": false,\n      \"nofish@zeroid.bit\": { \"max_size\": 100000 }\n    }\n  }\n}\n```\n\n*   `\"ignore\": \".*\"`表示当前目录下的内容是由用户签名的，而不是网站所有者。\n*   `cert_signers`表示网站接受哪些证书颁发者的账户\n*   `permission_rules`规定用户内容的最大大小和允许用户存放哪些文件\n*   `permissions`这个是针对单个用户的规定。禁止了bad@zeroid.bit，并允许nofish@zeroid.bit文件大小上限100kb。\n\n### 在根目录的`content.json`引入新创建的`content.json`\n\n添加\n\n```\n  ...\n    \"ignore\": \"data/.*\",\n    \"includes\": {\n        \"data/users/content.json\": {\n            \"signers\": [],\n            \"signers_required\": 1\n        }\n    },\n  ...\n```\n\n**弄完之后，在侧边栏签名两个`content.json`**\n\n### 发送消息\n\n```\n   sendMessage () {\n        if (!this.site_info.cert_user_id) {  // No account selected, display error\n            this.cmd(\"wrapperNotification\", [\"info\", \"Please, select your account.\"])\n            return false\n        }\n\n        // This is our data file path\n        var data_inner_path = \"data/users/\" + this.site_info.auth_address + \"/data.json\"\n        var content_inner_path = \"data/users/\" + this.site_info.auth_address + \"/content.json\"\n\n        // Load our current messages\n        this.cmd(\"fileGet\", {\"inner_path\": data_inner_path, \"required\": false}, (data) => {\n            if (data)  // Parse current data file\n                data = JSON.parse(data)\n            else  // Not exists yet, use default data\n                data = { \"message\": [] }\n\n            // Add the new message to data\n            data.message.push({\n                \"body\": document.getElementById(\"message\").value,\n                \"date_added\": Date.now()\n            })\n\n            // Encode data array to utf8 json text\n            var json_raw = unescape(encodeURIComponent(JSON.stringify(data, undefined, '\\t'))) \n\n            // Write file to disk\n            this.cmd(\"fileWrite\", [data_inner_path, btoa(json_raw)], (res) => {\n                if (res == \"ok\") {\n                    // Reset the message input\n                    document.getElementById(\"message\").value = \"\"\n                    // Sign the changed file in our user's directory\n                    this.cmd(\"siteSign\", {\"inner_path\": content_inner_path}, (res) => {\n                        // Publish to other users\n                        this.cmd(\"sitePublish\", {\"inner_path\": content_inner_path, \"sign\": false})\n                    })\n                } else {\n                    this.cmd(\"wrapperNotification\", [\"error\", \"File write error: #{res}\"])\n                }\n            })\n        })\n\n        return false\n    }\n```\n\n### 创建数据库\n\n查询消息不是在json中查询（虽然也可以），而是先把json数据映射到数据库（SQLite3），再查询。\n\n零网会帮咱创建数据库，只要规定好数据库模式就行。\n\n在`dbschema.json`中添加\n\n```\n{\n    \"db_name\": \"ZeroChat\",\n    \"db_file\": \"data/zerochat.db\",\n    \"version\": 2,\n    \"maps\": {\n        \"users/.+/data.json\": {\n            \"to_table\": [ \"message\" ]\n        },\n        \"users/.+/content.json\": {\n            \"to_json_table\": [ \"cert_user_id\" ],\n            \"file_name\": \"data.json\"\n        }\n    },\n    \"tables\": {\n        \"json\": {\n            \"cols\": [\n                [\"json_id\", \"INTEGER PRIMARY KEY AUTOINCREMENT\"],\n                [\"directory\", \"TEXT\"],\n                [\"file_name\", \"TEXT\"],\n                [\"cert_user_id\", \"TEXT\"]\n            ],\n            \"indexes\": [\"CREATE UNIQUE INDEX path ON json(directory, file_name)\"],\n            \"schema_changed\": 10\n        },\n        \"message\": {\n            \"cols\": [\n                [\"body\", \"TEXT\"],\n                [\"date_added\", \"INTEGER\"],\n                [\"json_id\", \"INTEGER REFERENCES json (json_id)\"]\n            ],\n            \"indexes\": [\"CREATE UNIQUE INDEX message_key ON message(json_id, date_added)\"],\n            \"schema_changed\": 10\n        }\n    }\n}\n```\n\n*   `\"maps\":`定义json文件和数据库的映射关系\n*   `\"tables\": {`描述表的结构\n*   `[\"json_id\", \"INTEGER REFERENCES json (json_id)\"]`每个表都得包含json_id字段。\n- `\"schema_changed\": 10` 每次改变数据库表结构的时候都应增加此字段的值，这样对等方就能重载重建数据库。\n\n做完以上工作后，**点击侧边栏的`重载`和`重建`**，否则更改不会显现出来。\n\n查看`.db`文件我推荐使用DB Browser for SQLite\n\n### 查询并显示消息\n\n```\n    loadMessages () {\n        this.cmd(\"dbQuery\", [\"SELECT * FROM message LEFT JOIN json USING (json_id) ORDER BY date_added DESC\"], (messages) => {\n            document.getElementById(\"messages\").innerHTML = \"\"  // Always start with empty messages\n            for (var i=0; i < messages.length; i++) {\n                this.addMessage(messages[i].cert_user_id, messages[i].body)\n            }\n        })\n    }\n```\n\n并在onOpenWebsocket 函数中添加`this.loadMessages()`。\n\n### ZeroChat基本建成了"
    },
    {
      "post_id": 41,
      "title": "零网建站小提示",
      "date_published": 1532693850.65,
      "body": "译自[ZeroNet Dev Center : Tips and Tricks](/DevCenter.bit/?/tutorials/tips_tricks)\n\n### 网站所有者可以修改用户的`data.json`文件吗？\n\n可以。修改那个文件，然后手动将文件路径添加进`content.json`中，点击`签名并发布`。通常，那个文件的路径就像`data/users/[user's id key folder]/content.json`。\n\n### 我的网站需要支持哪些浏览器？\n\n只需支持能用Web Socket's的浏览器，因为零网需要Web Socket's。这表明你无需支持IE10前的任何版本。\n\n### 数据库中的自增字段出现问题\n\n重构数据库并不会把自增字段置1，（后面不译了），所以你要手动地增加字段地值，不要用自增字段。\n\n### 在数据库发生改动时刷新列表\n\n举个例子\n要把这段代码加入`onRequest()`函数中\n\n```\nif (message.params.event[0] == \"file_done\") {\n    loadComments();\n}\n```\n\n这样就可以加载评论更新了。\n\n### 使用一个非特定用户的`data.json`\n\n你可以存储一个只有你能修改，且不在用户目录下的`data.json`文件。\n首先，确保这个文件没在`content.json`中设置忽略，然后在`data`目录下创建这个文件，在`dbschema.json`中的`maps`里添加\n\n```\n\"你创建的文件的名称.json\": {\n    \"to_table\": [\n        {\n            \"node\": \"tutorials\",\n            \"table\": \"tutorials\"\n        }\n    ]\n}\n```\n\n意思是你的文件里有个数组叫`tutorials`将会映射到 表`tutorials`\n在`table`那段加入\n\n```\n\"tutorials\": {\n    \"cols\": [\n        [\"id\", \"INTEGER PRIMARY KEY\"],\n        [\"slug\", \"TEXT NOT NULL\"],\n        [\"file\", \"TEXT NOT NULL\"],\n        [\"title\", \"TEXT NOT NULL\"],\n        [\"description\", \"TEXT\"],\n        [\"author\", \"TEXT NOT NULL\"],\n        [\"tags\", \"TEXT\"],\n        [\"json_id\", \"INTEGER REFERENCES json (json_id)\"]\n    ],\n    \"indexes\": [\"CREATE UNIQUE INDEX tutorial_key ON tutorials(id, json_id)\", \"CREATE UNIQUE INDEX tutorials_slug ON tutorials(slug)\", \"CREATE INDEX tutorial_file ON tutorials(slug)\", \"CREATE INDEX tutorial_title ON tutorials(title)\"],\n    \"schema_changed\": 12\n}\n```\n\n这段告诉零网表`tutorials`所有的字段和索引，其中字段应与`data.json`中的字段相对应。\n**确保你加了这行`[\"json_id\", \"INTEGER REFERENCES json (json_id)\"]`**，否则这些都没作用。\n\n当你改变`dbschema.json`文件内容时，确保你更新了文件中的`schema_changed`字段以通知零网刷新数据表，然后你要做的就是在侧边栏中点击`重载`和`重构`（在你的站点上）。"
    },
    {
      "post_id": 40,
      "title": "零网的用户和数据库",
      "date_published": 1532693435.299,
      "body": "长博文：[点击查看](./note/zeronet/lwdyhhsj.md.html)"
    },
    {
      "post_id": 39,
      "title": "博文还是发在这上面，例子放DemoOne上",
      "date_published": 1532575454.764,
      "body": "DemoOne是我写的一个示例网站，可以在新闻源中关注，可以只关注提到你的消息，支持Markdown（包含emoji、图片、表格）。\n\nDemoOne还是用来学习开发零网网站的。网站的Debug页面中，可以查看ZiteInfo、FollowList、Local Storage的对象结构\n\n请在ZeroSites点星支持。"
    },
    {
      "post_id": 38,
      "title": "聊天室DemoOne或已完成",
      "date_published": 1532566815.791,
      "body": "[链接](http://127.0.0.1:43110/1BpjbPLPb2Vyipqu2Y8Dk54ngbesNrt7iG/)"
    },
    {
      "post_id": 36,
      "title": "根据ZeroSites的用户数得出，零网活跃用户2175人。",
      "date_published": 1532444359.489,
      "body": "_就算每个人两个号也有1000人\n\n按1500人计算吧\n\n知道零网的 7万\n\n活跃在零网的 1500人\n\n零网大小（每个活跃的人建一个站点）1500×10MB=16GB\n\n再计算冗余是1500份，1500×16GB=24TB"
    },
    {
      "post_id": 35,
      "title": "编写零网网站的必经之路",
      "date_published": 1532440989.398,
      "body": "第一层 HTML、CSS、JS\n\n第二层 Jquery、Pure.css（举例而已，指各种前端框架）\n\n第三层 CoffeeScript、Python（用于查看零网源码）\n\n还需要学Sql。"
    },
    {
      "post_id": 34,
      "title": "Hacked ZeroSites",
      "date_published": 1532433441.675,
      "body": "测试一下ZeroSites有没有什么非法数据筛选机制，结果还真没有。\n![](./img/2018-07-24_20-00-14.png)\n![](./img/chrome_2018-07-24_19-57-02.png)"
    },
    {
      "post_id": 33,
      "title": "让博客显示全部评论，不仅仅是三条",
      "date_published": 1532423660.482,
      "body": "找到`js/all.js`，搜索`\"SELECT comment.*,`，找到对应sql语句把后面的`LIMIT 3`删掉或改成你要的评论数。"
    },
    {
      "post_id": 32,
      "title": "资源分享-高清大图",
      "date_published": 1532422664.196,
      "body": "![滑稽吗](./img/huaji_rect.svg)\n\n若需要`.ai`文件可联系我，方的圆的扁的都有。哦不，扁的没有。"
    },
    {
      "post_id": 30,
      "title": "零网网站开发的相关教程推荐",
      "date_published": 1532407746.956,
      "body": "[github:ZeroNet-Dev-Center](https://github.com/krixano/ZeroNet-Dev-Center)\n[ZeroNet+Dev+Board](http://127.0.0.1:43110/Talk.ZeroNetwork.bit/?Topics:9_1AWwhg4EiWAVttfQboJZ4wJfX3WawfJT3h/ZeroNet+Dev+Board)"
    },
    {
      "post_id": 29,
      "title": "The.truth.about.ZeroNet（已编译）",
      "date_published": 1532392382.054,
      "body": "转自[糖豆网](http://127.0.0.1:43110/12v7UfSjpujeq6xkp8mu64Jt8mEapph8A3/?Post:21)，[文件](./The.truth.about.ZeroNet.7z)已编译。内容是讲开发零网网站。"
    },
    {
      "post_id": 27,
      "title": "ZeroNet有多少人呢，大约7万人。",
      "date_published": 1532326606.401,
      "body": "根据ZeroID注册用户数据`\\ZeroNet\\data\\1iD5ZQJMNXu43w1qLB8sfdHVKppVMduGz\\data\\users_archive.json`文件。准确数据70050 (2018-7-23 14:20)"
    },
    {
      "post_id": 26,
      "title": "建了一个简单的零网网站：适合入门学习。",
      "date_published": 1532229322,
      "body": "[DemoOne](http://127.0.0.1:43110/1BpjbPLPb2Vyipqu2Y8Dk54ngbesNrt7iG/)\n包含一个ZeroChat"
    },
    {
      "post_id": 25,
      "title": "建站途中遇到的问题和解决方法",
      "date_published": 1532164735.406,
      "body": "*   修改`content.json`后可以在侧边栏点`保存站点设置`来让配置生效，这样就不用重启零网客户端了。\n*   出现私钥无效等问题，可以重新签名几个`content.json`。\n*   如果想删评论，是可以的，先在`data/users/...../content.json`删掉相应评论，然后重建重载数据库（侧边栏中）。"
    },
    {
      "post_id": 23,
      "title": "用Webstorm做MD笔记",
      "date_published": 1532071030.511,
      "body": "Atom、VisualStudioCode已经不能满足我了。\n\n如果md文件里没有大量html的话，还是选VSCode好。\n\n注：使用的是自配的Markdown写作环境/工具链。"
    },
    {
      "post_id": 22,
      "title": "零网相关",
      "date_published": 1532058833.751,
      "body": "*   [使用零网API-入门篇](./?Post:21:%E4%BD%BF%E7%94%A8%E9%9B%B6%E7%BD%91API-%E5%85%A5%E9%97%A8%E7%AF%87)​​​​​​\n\n*   [零网网站开发的相关教程推荐](./?Post:30:%E9%9B%B6%E7%BD%91%E7%BD%91%E7%AB%99%E5%BC%80%E5%8F%91%E7%9A%84%E7%9B%B8%E5%85%B3%E6%95%99%E7%A8%8B%E6%8E%A8%E8%8D%90)\n\n*   [The.truth.about.ZeroNet（已编译）](./?Post:29:The.truth.about.ZeroNet%EF%BC%88%E5%B7%B2%E7%BC%96%E8%AF%91%EF%BC%89)\n\n*   [建站途中遇到的问题和解决方法](./?Post:25:%E5%BB%BA%E7%AB%99%E9%80%94%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95)\n\n*   [零网的用户和数据库](./?Post:40:%E9%9B%B6%E7%BD%91%E7%9A%84%E7%94%A8%E6%88%B7%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93)\n\n*   [零网建站小提示](./?Post:41:%E9%9B%B6%E7%BD%91%E5%BB%BA%E7%AB%99%E5%B0%8F%E6%8F%90%E7%A4%BA)\n\n*   [零网聊天室Chat建站指南](./?Post:43:%E9%9B%B6%E7%BD%91%E8%81%8A%E5%A4%A9%E5%AE%A4Chat%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97)\n\n*   [图解零网系列-第一篇](./?Post:44:%E5%9B%BE%E8%A7%A3%E9%9B%B6%E7%BD%91%E7%B3%BB%E5%88%97-%E7%AC%AC%E4%B8%80%E7%AF%87)\n\n*   [实现Follow功能：插件：Newsfeed](./?Post:45:New+blog+post)\n\n*   [可选文件、大文件上传](./?Post:46:%E5%8F%AF%E9%80%89%E6%96%87%E4%BB%B6%E3%80%81%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0)\n\n*   [删除可选文件，下载可选文件的两种方式：fileNeed和直接设置src](./?Post:47:%E5%88%A0%E9%99%A4%E5%8F%AF%E9%80%89%E6%96%87%E4%BB%B6%EF%BC%8C%E4%B8%8B%E8%BD%BD%E5%8F%AF%E9%80%89%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F%EF%BC%9AfileNeed%E5%92%8C%E7%9B%B4%E6%8E%A5%E8%AE%BE%E7%BD%AEsrc)\n\n*   [The principle of ZeroBoard 原理](./?Post:57:The+principle+of+ZeroBoard+%E5%8E%9F%E7%90%86)"
    },
    {
      "post_id": 21,
      "title": "使用零网API-入门篇",
      "date_published": 1532054578.636,
      "body": "应该知道零网的github仓库吧，[Repo](https://github.com/HelloZeroNet/ZeroNet)。\n从github这里入口，可以找到零网的[文档](https://zeronet.readthedocs.io/en/latest/)。\n\n## 入门篇\n\n关于配置`zeronet.conf`，可以用命令`zeronet.py -help`查看可用选项。\n零网网站是纯前端的，但是可以调用零网API来实现动态网站。\n使用调试模式方便开发，`lib\\ZeroNet.cmd --debug`（win）。在调试模式下，会自动转换CoffeeScript为JavaScript，合并css、js文件为all.css和all.js。\n\n还是建一个页面写吧，这里的上下文不合适。[点此跳转到正文](./note/0net/first.md.html)\n\n先写到这，明天再续。"
    },
    {
      "post_id": 20,
      "title": "搭建php调试环境",
      "date_published": 1532010029.64,
      "body": "安装Xdebug扩展，先把自己的phpinfo提交给xdebug分析，根据[安装向导](https://xdebug.org/wizard.php)下载合适的版本。\n安装[Xdebug helper for chrome](https://chrome.google.com/webstore/detail/xdebug-helper/eadndfjplgieldjbigjakmdgkmoaaaoc)。\n设置phpstorm，在`Language & Framework > PHP > Servers`中添加服务器。\n\n配置`php.ini`\n\n```ini\n[xdebug]\nzend_extension=\"c:/wamp64/bin/php/php7.2.4/zend_ext/php_xdebug-2.6.0-7.2-vc15-x86_64.dll\"\n; 把上面一行改成自己的xdebug路径\nxdebug.remote_enable = on\nxdebug.profiler_enable = off\nxdebug.profiler_enable_trigger = Off\nxdebug.profiler_output_name = cachegrind.out.%t.%p\nxdebug.profiler_output_dir =\"c:/wamp64/tmp\"\nxdebug.show_local_vars=1\nxdebug.idekey=\"PHPSTORM\"\n```\n\n以下是正常情况下不需要修改的。\n`Language & Framework > PHP > Debug`中启用Listening\nXdebug Debug port : 9000\n\n重启server，重启chrome。"
    },
    {
      "post_id": 19,
      "title": "后端基础",
      "date_published": 1531835611,
      "body": "学习环境：使用WampServer、PHPStorm。\n[搭建php调试环境](./?Post:20:New+blog+post)\n[PHP学习笔记-第一篇](./note/php1/php1.md.html)\n[PHP学习笔记-第二篇](./note/php2/php2.md.html)"
    },
    {
      "post_id": 17,
      "title": "WIN日常使用的小工具",
      "date_published": 1531802447.612,
      "body": "PE工具：微PE\n\n### 对win系统的调教和定制工具\n\n*   Sysinternal系列\n*   Nirsoft的全套小工具\n*   TheWindowsClub的两个工具，FixWin和Ultimate Windows Tweaker"
    },
    {
      "post_id": 16,
      "title": "克隆硬盘",
      "date_published": 1531451022.008,
      "body": "用轻松备份专业版备份硬盘，之后用微PE的BootNotice工具修复引导（BCD有问题）。"
    },
    {
      "post_id": 15,
      "title": "杂项",
      "date_published": 1532161287,
      "body": "[制作 可保留更改 Live Linux](./?Post:14:%E5%88%B6%E4%BD%9C+%E5%8F%AF%E4%BF%9D%E7%95%99%E6%9B%B4%E6%94%B9+Live+Linux+)\n\n[Win小工具](./?Post:17:WIN%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7)\n\n[正则表达式笔记](./note/regex/regex.md.html)"
    },
    {
      "post_id": 14,
      "title": "制作 可保留更改 Live Linux ",
      "date_published": 1531396565.931,
      "body": "### **释义**\n\n标题中的Live指的是Live USB。\nLive USB：包含完整系统，且可引导的U盘或移动硬盘\n可保留更改(Persistent)：通常，Live系统上对文件的操作重启之后会消失，可以分配一点空间记录这些更改。\n\n### **制作**\n\n试过好几个工具，安装出来的系统均无法正确引导，其中包括LinuxLive USB Creator,UNetbootin。\n最后用**Universal-USB-Installer**安装成功。\n\n### **缺点**\n\n*   系统更新、网卡设置等无法保留。"
    },
    {
      "post_id": 13,
      "title": "DB",
      "date_published": 1531301944.292,
      "body": "[MySQL](./note/mysql/msql.md.html)"
    },
    {
      "post_id": 12,
      "title": "Markdown系列",
      "date_published": 1531218701.055,
      "body": "[Pandoc环境](./?Post:8:%E7%94%A8%E4%BA%8E%E5%81%9A%E7%AC%94%E8%AE%B0%E7%9A%84%E8%BD%AF%E4%BB%B6_%E5%8F%88%E6%8D%A2%E4%BA%86)\n\n[Pandoc使用](./?Post:11:Pandoc%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97-Markdown)\n\n[用于做笔记的软件](http://127.0.0.1:43110/12q9YNb5oJ331nTjUxWefV9W2EXpMu8RWi/?Post:6:%E7%94%A8%E4%BA%8E%E5%81%9A%E7%AC%94%E8%AE%B0%E7%9A%84%E8%BD%AF%E4%BB%B6)\n\n[用Webstorm做MD笔记](http://127.0.0.1:43110/12q9YNb5oJ331nTjUxWefV9W2EXpMu8RWi/?Post:23:New+blog+post)"
    },
    {
      "post_id": 11,
      "title": "Pandoc用户指南-Markdown",
      "date_published": 1531200568,
      "body": "[Pandoc User’s Guide](http://pandoc.org/MANUAL.html#extension-yaml_metadata_block)\n\n基本用法：Pandoc -f markdown -t html -o lorem.html lorem.md\n\n意即 **from** markdown **to** html **output**:lorem.html **sourceFile**:lorem.m\n\n但这不够用，以下是目前使用的命令行。\n\nPandoc -f markdown**+ext**1-ext2…… -t html -o lorem.html lorem.md --**template**=my-md-template --**mathjax** --**highlight-style** kate --base-header-level=1 --**standlone**\n\n### -f markdown**+ext1-ext2..**.\n\n控制扩展启用（+），或禁用（-）。\n\n通过 `pandoc --list-extensions=markdown`​命令查询缺省情况下启用/禁用的哪些扩展\n\n### --**template=**my-md-template​​​​​​\n\n用于指定模板，默认在%Appdata%\\Roaming\\Pandoc\\templates目录下搜寻文件\n\n可由修改[官方默认模板](https://github.com/jgm/pandoc-templates)来实现自定义模板，如果不想自己写，github上一[搜](https://github.com/search?utf8=%E2%9C%93&q=pandoc+template&type=)一堆\n\n### --**mathjax=[url]**\n\n指定tex渲染引擎，还可以是--katex等等。可选参数url应指向mathjax的js文件\n\n### --**highlight-style**\n\n语法高亮主题， 用`pandoc --list-highlight-styles`查看\n\n![chrome_2018-07-08_22-05-43.png (455x263)](data/img/post_11_chrome_2018-07-08_22-05-43.png)\n\npygments\n\n![chrome_2018-07-08_22-06-21.png (448x263)](data/img/post_11_chrome_2018-07-08_22-06-21.png)\n\ntango\n\n![chrome_2018-07-08_22-06-43.png (443x257)](data/img/post_11_chrome_2018-07-08_22-06-43.png)\n\nespresso\n\n![chrome_2018-07-08_22-07-13.png (439x251)](data/img/post_11_chrome_2018-07-08_22-07-13.png)\n\nzenburn\n\n![chrome_2018-07-08_22-07-39.png (439x250)](data/img/post_11_chrome_2018-07-08_22-07-39.png)\n\nkate\n\n![chrome_2018-07-08_22-08-24.png (430x259)](data/img/post_11_chrome_2018-07-08_22-08-24.png)\n\nmonochrome\n\n![chrome_2018-07-08_22-09-16.png (453x258)](data/img/post_11_chrome_2018-07-08_22-09-16.png)\n\nbreezedark\n\n![chrome_2018-07-08_22-09-37.png (435x249)](data/img/post_11_chrome_2018-07-08_22-09-37.png)\n\nhaddock"
    },
    {
      "post_id": 10,
      "title": "笔记/博客的作用",
      "date_published": 1531199825.367,
      "body": "整理所学的知识，转化为一种自己能够高效地复习的结构。去除书中冗余（凑字）部分。记录以便日后翻阅查询，毕竟学的东西总有一天会忘掉。至于笔记的美观，可以提升复习时的兴趣，防止自己强迫症发作。\n\n网上有一些宣称手写笔记有助于加强记忆的文章，甚至还有论文。对此，我表示……（省略一万字）\n手写还是打字做笔记好，这因人而异，反正我是不会手写的~~（字丑，全是涂改痕迹）~~。"
    },
    {
      "post_id": 8,
      "title": "用于做笔记的软件_又换了",
      "date_published": 1531132401.024,
      "body": "新的写作环境：Chrome + LiveReload + VSCode + 自编工具\n\n原因，<abbr title=\"Markdown Preview Plus\">mpp</abbr> 不能满足我使用js脚本的需求。而且直接调用pandoc编译md文件，不会出现预览和最终导出的效果不一致的问题。\n\n小工具：[Here](./note/mdac.zip)\n\n源码：[gayhub](https://github.com/blurHY/markdown_autoConvert)\n\n* * *\n\n更新 2018-7-17：编的工具有bug，漏了一句话导致CPU高占用。\n\n* * *\n\n更新 2018-7-18：Atom对md的语法高亮支持不太好，改用VSCode"
    },
    {
      "post_id": 6,
      "title": "用于做笔记的软件",
      "date_published": 1530964659.706,
      "body": "主要是使用draw.io作图，atom做笔记。\n\n其中，atom的markdown插件为markdown-perview-plus。\n\n用过markdown-preview-enhanced一段时间，因为它支持内嵌js，还有codechunk特性，所以很看好这个项目。但后来发现有bug，而且项目所有者似乎已经不管这个项目，故只能选用mpp。\n\n目前选用的markdown引擎为pandoc，因为其特性比markdown-it多。\n\n注：写作环境已改动，[参见](http://127.0.0.1:43110/12q9YNb5oJ331nTjUxWefV9W2EXpMu8RWi/?Post:23:New+blog+post)"
    },
    {
      "post_id": 3,
      "title": "前端基础",
      "date_published": 1532160987,
      "body": "[HTML](./note/html/html.md.html)​​​​​​\n\n[CSS](./note/css/css.md.html)​​​​​​\n\n[Javascript](./note/javascript/javascript1/javascript.md.html)​​​​​​\n\n[Jquery](./note/javascript/jquery/jq.md.html)​​​​​​\n\n[Javascript-第二篇](./note/javascript/js2/js2.md.html)\n\n[CSS3](./note/css3/css3.md.html)\n\n[HTML5](./note/html5/html5.md.html)"
    },
    {
      "post_id": 2,
      "title": "First Post",
      "date_published": 1530773422.914,
      "body": "目前状态：学习Web技术（php、建站等）\n\n计划：略学nodejs和逆向工程技术，复习和提高桌面程序开发技术（c#,c++），学嵌入式(复习c)"
    }
  ]
}